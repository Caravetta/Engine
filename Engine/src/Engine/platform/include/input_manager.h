#ifndef __INPUT_MANAGER_H__
#define __INPUT_MANAGER_H__

#include <string>
#include <unordered_map>
#include "core_common.h"
#include "event_system.h"
#include "platform.h"

namespace Engine {

/* https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf */

typedef enum {
    KEY_NONE,
    KEY_ERR_OVF,
    KEY_POST_FAIL,
    KEY_ERROR_UNDEFINED,
    KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, KEY_H, KEY_I, KEY_J, KEY_K,
    KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R, KEY_S, KEY_T, KEY_U, KEY_V,
    KEY_W, KEY_X, KEY_Y, KEY_Z, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7,
    KEY_8, KEY_9, KEY_0,
    KEY_ENTER, KEY_ESCAPE, KEY_BACKSPACE, KEY_TAB, KEY_SPACE,
    KEY_MINUS, KEY_EQUAL, KEY_LEFT_BRACKET, KEY_RIGHT_BRACKET,
    KEY_BACKSLASH, KEY_HASH_TILDE, KEY_SEMICOLON, KEY_APOSTROPHE,
    KEY_GRAVE_ACCENT, KEY_COMMA, KEY_DOT, KEY_SLASH, KEY_CAPS_LOCK,
    KEY_F1, KEY_F2, KEY_F3, KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9,
    KEY_F10, KEY_F11, KEY_F12,
    KEY_SYSRQ, KEY_SCROLL_LOCK, KEY_PAUSE,
    KEY_INSERT, KEY_HOME, KEY_PAGE_UP, KEY_DELETE, KEY_END, KEY_PAGE_DOWN,
    KEY_LEFT, KEY_RIGHT, KEY_DOWN, KEY_UP,
    KEY_NUM_LOCK, KEY_PAD_DIVIDE, KEY_PAD_MULTIPLY, KEY_PAD_SUBTRACT,
    KEY_PAD_ADD, KEY_PAD_ENTER,
    KEY_PAD_1, KEY_PAD_2, KEY_PAD_3, KEY_PAD_4, KEY_PAD_5, KEY_PAD_6, KEY_PAD_7,
    KEY_PAD_8, KEY_PAD_9, KEY_PAD_0, KEY_PAD_DOT,
    KEY_102, KEY_COMPOSE, KEY_POWER, KEY_PAD_EQUAL,
    KEY_F13, KEY_F14, KEY_F15, KEY_F16, KEY_F17, KEY_F18, KEY_F19, KEY_F20,
    KEY_F21, KEY_F22, KEY_F23, KEY_F24,
    KEY_EXECUTE, KEY_HELP, KEY_MENU, KEY_SELECT, KEY_STOP, KEY_AGAIN, KEY_UNDO,
    KEY_CUT, KEY_COPY, KEY_PASTE, KEY_FIND, KEY_MUTE,
    KEY_VOLUME_UP, KEY_VOLUME_DOWN,
    KEY_LOCKING_CAPS, KEY_LOCKING_NUM, KEY_LOCKING_SCROLL,
    KEY_PAD_COMMA, KEY_PAD_EQUAL_SIGN,
    KEY_INTL_1, KEY_INTL_2, KEY_INTL_3, KEY_INTL_4, KEY_INTL_5, KEY_INTL_6,
    KEY_INTL_7, KEY_INTL_8, KEY_INTL_9,
    KEY_LANG_1, KEY_LANG_2, KEY_LANG_3, KEY_LANG_4, KEY_LANG_5, KEY_LANG_6,
    KEY_LANG_7, KEY_LANG_8, KEY_LANG_9,
    KEY_ALTERNATE_ERASE, KEY_SYSREQ, KEY_CANCEL, KEY_CLEAR, KEY_PRIOR,
    KEY_RETURN, KEY_SEPARATOR, KEY_OUT, KEY_OPER, KEY_CLEAR_AGAIN,
    KEY_CRSEL_PROPS, KEY_EXSEL,
    KEY_RESERVED_A5, KEY_RESERVED_A6, KEY_RESERVED_A7, KEY_RESERVED_A8,
    KEY_RESERVED_A9, KEY_RESERVED_AA, KEY_RESERVED_AB, KEY_RESERVED_AC,
    KEY_RESERVED_AD, KEY_RESERVED_AE, KEY_RESERVED_AF,
    KEY_PAD_00, KEY_PAD_000, KEY_THOUSANDS_SEPARATOR, KEY_DECIMAL_SEPARATOR,
    KEY_CURRENCY_UNIT, KEY_CURRENCY_SUBUNIT,
    KEY_PAD_LEFT_PAREN, KEY_PAD_RIGHT_PAREN,
    KEY_PAD_LEFT_BRACE, KEY_PAD_RIGHT_BRACE,
    KEY_PAD_TAB, KEY_PAD_BACKSPACE,
    KEY_PAD_A, KEY_PAD_B, KEY_PAD_C, KEY_PAD_D, KEY_PAD_E, KEY_PAD_F,
    KEY_PAD_XOR, KEY_PAD_CARET, KEY_PAD_PERCENT,
    KEY_PAD_LEFT_ANGLE_BRACKET, KEY_PAD_RIGHT_ANGLE_BRACKET,
    KEY_PAD_AMPERSAND, KEY_PAD_DOUBLE_AMPERSAND,
    KEY_PAD_PIPE, KEY_PAD_DOUBLE_PIPE,
    KEY_PAD_COLON, KEY_PAD_OCTOTHORPE,
    KEY_PAD_SPACE, KEY_PAD_AT, KEY_PAD_EXCLAMATION,
    KEY_PAD_MEMORY_STORE, KEY_PAD_MEMORY_RECALL, KEY_PAD_MEMORY_CLEAR,
    KEY_PAD_MEMORY_ADD, KEY_PAD_MEMORY_SUBTRACT, KEY_PAD_MEMORY_MULTIPLY,
    KEY_PAD_MEMORY_DIVIDE,
    KEY_PAD_PLUS_MINUS,
    KEY_PAD_CLEAR, KEY_PAD_CLEAR_ENTRY,
    KEY_PAD_BINARY, KEY_PAD_OCTAL, KEY_PAD_DECIMAL, KEY_PAD_HEXADECIMAL,
    KEY_PAD_RESERVED_DE, KEY_PAD_RESERVED_DF,
    KEY_LEFT_CONTROL, KEY_LEFT_SHIFT, KEY_LEFT_ALT, KEY_LEFT_GUI,
    KEY_RIGHT_CONTROL, KEY_RIGHT_SHIFT, KEY_RIGHT_ALT, KEY_RIGHT_GUI,
    KEY_RESERVED_E8, KEY_RESERVED_E9, KEY_RESERVED_EA, KEY_RESERVED_EB,
    KEY_RESERVED_EC, KEY_RESERVED_ED, KEY_RESERVED_EE, KEY_RESERVED_EF,
    KEY_RESERVED_F0, KEY_RESERVED_F1, KEY_RESERVED_F2, KEY_RESERVED_F3,
    KEY_RESERVED_F4, KEY_RESERVED_F5, KEY_RESERVED_F6, KEY_RESERVED_F7,
    KEY_RESERVED_F8, KEY_RESERVED_F9, KEY_RESERVED_FA, KEY_RESERVED_FB,
    KEY_RESERVED_FC, KEY_RESERVED_FD, KEY_RESERVED_FE, KEY_RESERVED_FF,
    KEY_MEDIA_NEXT, KEY_MEDIA_PREVIOUS, KEY_MEDIA_STOP, KEY_MEDIA_MUTE,
    KEY_MEDIA_SELECT, KEY_MEDIA_WWW, KEY_MEDIA_MAIL, KEY_MEDIA_CALCULATOR,
    KEY_MEDIA_COMPUTER, KEY_MEDIA_SEARCH, KEY_MEDIA_HOME, KEY_MEDIA_BACK,
    KEY_MEDIA_FORWARD, KEY_MEDIA_HALT, KEY_MEDIA_REFRESH, KEY_MEDIA_BOOKMARKS,
    KEY_MEDIA_BRIGHTNESS_DOWN, KEY_MEDIA_BRIGHTNESS_UP,
    KEY_MEDIA_DISPLAY, KEY_MEDIA_KEYBOARD_ILLUMINATION_TOGGLE,
    KEY_MEDIA_KEYBOARD_ILLUMINATION_UP, KEY_MEDIA_KEYBOARD_ILLUMINATION_DOWN,
    KEY_MEDIA_EJECT, KEY_MEDIA_SLEEP, KEY_MEDIA_APP_1, KEY_MEDIA_APP_2,
    KEY_MEDIA_REWIND, KEY_MEDIA_FASTFORWARD,
    KEY_ID_MAX
} key_id_t;

/* C++ doesn't allow postfix increments for enumerations */
key_id_t operator ++( key_id_t &id, int );

#define MOUSE_POS_CHANGE "MOUSE_POS_CHANGE"

typedef struct {
    key_id_t scancode;
    uint16_t keysym;
} key_t;

typedef enum {
    KeyReleased,
    KeyPressed,
} key_state_t;

typedef struct {
    key_id_t scancode;
    uint16_t keysym;
    key_state_t state;
} key_input_t;

key_state_t key_pressed( key_id_t scancode );

class Input_Manager {
public:
    static Input_Manager* get_instance();
    static std::string get_key_name( key_id_t scancode );
    void process_key_down( key_id_t scancode, uint16_t keysym );
    void process_key_up( key_id_t scancode, uint16_t keysym );
    void process_mouse_move( uint64_t x_pos, uint64_t y_pos );
    Input_Manager();

private:
    std::string key_lut[350];

protected:
    static Input_Manager* instance;
};

} //end namespace Engine

#endif //__INPUT_MANAGER_H__
