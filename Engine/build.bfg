
include_list = ['src/',
                'src/Engine/include/',
                'src/Engine/application/include/',
                'src/Engine/event_system/include/',
                'src/Engine/platform/include/',
                'src/Engine/ecs/include/',
                'src/Engine/time/include/',
                'src/Engine/job_system/include/',
                'src/Engine/renderer/include/',
                'src/Engine/asset_system/include/',
                'src/Engine/camera/include/',
                'src/Engine/mesh/include/',
                'src/Engine/font/include/',
                'src/Engine/worker_system/include/',
                'src/Engine/math/include/',
                'src/Engine/file_loaders/include']

source_files = []

source_files.extend(find_files('src/', '*.cpp', flat=True))
source_files.extend(find_files('src/Engine/application/', '*.cpp'))
source_files.extend(find_files('src/Engine/event_system/', '*.cpp'))
source_files.extend(find_files('src/Engine/ecs/', '*.cpp'))
source_files.extend(find_files('src/Engine/time/', '*.cpp'))
source_files.extend(find_files('src/Engine/job_system/', '*.cpp'))
source_files.extend(find_files('src/Engine/renderer/', '*.cpp'))
source_files.extend(find_files('src/Engine/math/', '*.cpp'))
source_files.extend(find_files('src/Engine/asset_system/', '*.cpp'))
source_files.extend(find_files('src/Engine/mesh/', '*.cpp'))
source_files.extend(find_files('src/Engine/font/', '*.cpp'))
source_files.extend(find_files('src/Engine/worker_system/', '*.cpp'))
source_files.extend(find_files('src/Engine/camera/', '*.cpp'))
source_files.extend(find_files('src/Engine/file_loaders/', '*.cpp'))
source_files.extend(find_files('src/Engine/platform/', '*.cpp', flat=True))

if env.platform.name == 'windows':
    flags = ['-DWINDOWS', '-DENGINE_EXPORT', '-D_CRT_SECURE_NO_WARNINGS', '-fp:fast', '-MD', '-Zo', '-Oi', '-W4', '-FC',
             '-Ox', '-Ot', '-wd4530', '-wd4577', '-wd4201', '-wd4251']
    link_flags = ['/LIBPATH:../lib/free_type/']
    package_list = [package('user32'), package('gdi32'), package('opengl32'), package('winmm')]
    include_list.extend(['src/Engine/platform/win32/include/', 'lib/free_type/include/']);
    source_files.extend(find_files('src/Engine/platform/win32/', '*.cpp'))
elif env.platform.name == 'linux':
    flags = ['-DLINUX', '-Wall', '-O3', '-fPIC', '-fvisibility=hidden', '-ffunction-sections']
    link_flags = [ '-Wl,--gc-sections' ]
    package_list = [package('GL'), package('GLU'), package('glut'), package('GLEW'), package('sdl2'), package('freetype2')]
    include_list.extend(['src/Engine/platform/linux/include/', '/usr/include/freetype2/']);
    source_files.extend(find_files('src/Engine/platform/linux/', '*.cpp'))

global_options(flags, lang='c++')

global_link_options(link_flags, 'native', 'dynamic')

objs = object_files(source_files, includes=include_list)

# Build the library

if env.platform.name == 'linux':
    lib_headers = header_directory('src', include='*.h')
    lib = library('Engine', objs, packages=package_list, includes=lib_headers)
elif env.platform.name == 'windows':
    library('Engine', objs, packages=package_list, libs=['lib/free_type/freetype.lib'])

if env.platform.name == 'linux':
    install(lib, lib_headers)
    pkg_config(includes=find_files('src/', '*.h', flat=True))

project('Engine', version='0.1')

if env.platform.name == 'linux':
    command('clean', cmds=[['rm', '-f', 'libEngine.so'], ['rm', '-rf', 'src']])

